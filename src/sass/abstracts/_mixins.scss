@mixin create-mq($breakpoint, $min-or-max) {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  @include create-mq($breakpoint, 'min') {
    &__col#{$modifier}_offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      &__col#{$modifier}_#{$i} {
        flex-basis: (100 / ($grid-cols / $i) ) * 1%;
      }
      &__col#{$modifier}_offset-#{$i} {
        margin-left: (100 / ($grid-cols / $i) ) * 1%;
      }
    }
  }
}

@mixin margin-classes {
  @for $i from 1 through $limit {
    // $margin: #{$i}px;
    $margin: $i * 0.25rem;
    /* margin #{$margin} */
    .m-#{$i}  {margin: $margin;}
    .ml-#{$i} {margin-left: $margin;}
    .mr-#{$i} {margin-right: $margin;}
    .mt-#{$i} {margin-top: $margin;}
    .mb-#{$i} {margin-bottom: $margin;}
    .mx-#{$i} {margin-left: $margin; margin-right: $margin;}
    .my-#{$i} {margin-top: $margin; margin-bottom: $margin;}
  }
}
@include margin-classes;

@mixin padding-classes {
  @for $i from 1 through $limit {
    // $padding: #{$i}px;
    $padding: $i * 0.25rem;
    /* padding #{$padding} */
    .p#{$i} {padding: $padding;}
    .pl#{$i} {padding-left: $padding;}
    .pr#{$i} {padding-right: $padding;}
    .pt#{$i} {padding-top: $padding;}
    .pb#{$i} {padding-bottom: $padding;}
    .px#{$i} {padding-left: $padding; padding-right: $padding;}
    .py#{$i} {padding-top: $padding; padding-bottom: $padding;}
  }
}
@include padding-classes;